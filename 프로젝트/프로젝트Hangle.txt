🔍 왜 Kaggle 벤치마킹이 좋은가?
항목&설명
1. 데이터 중심 구조
실제로 데이터를 업로드/분석/공유하는 시스템이라 빅데이터 수업에 딱 맞음
2. 사용자 중심 UI
사용자(참가자) 입장에서 보기 쉬운 구조니까 UI 설계 연습에 도움
3. 파이썬 기반 분석 가능
백엔드 분석 파트에 Pandas, Matplotlib, sklearn 등 자유롭게 쓸 수 있음
4. 자바로 관리자 페이지 구현	
데이터셋 관리, 유저 관리, 공지사항 같은 건 Java + JSP or Spring으로 하면 딱
5. 기술서/기획서 쓰기도 쉬움
벤치마킹한 구조가 명확하니까 팀원들과 기획 방향 공유도 쉬움

🧱 주요 기능 구성 (너희 팀 기준 추천)
기능	구현 기술	설명
✅ 회원가입 / 로그인	Java, Spring Security	기본적인 사용자 인증
✅ 데이터셋 업로드	Java, File Upload API	유저가 CSV 업로드 
✅ 대회 생성	Java + DB	관리자만 대회 생성 가능	
✅ 코드 업로드 & 평가	Python 실행 환경 연동	유저가 코드를 업로드하고 결과 확인
✅ 랭킹 시스템	DB + Python 채점	성능 순으로 랭킹 표시
✅ 공지사항 / 댓글	Java (JSP) + DB	커뮤니케이션 공간
✅ 데이터 시각화	Python + Chart.js	업로드한 데이터를 시각화해서 보여줌

🔧 기술스택 조합 예시
프론트: HTML, CSS, JS + Bootstrap
백엔드: Java (Spring Boot) + JSP
분석엔진: Python (Flask로 연결 or Jupyter 노트북 기반)
DB: MySQL 또는 PostgreSQL
시각화: Chart.js 또는 Plotly 연동

👨‍💻 초보자 팁
1. 기능을 전부 다 만들기보다는 "사용자 로그인 + 데이터 업로드 + 시각화 보기" 
   이 핵심 3가지만 잘 만들어도 심사에서 인상 깊을 확률 높음.
2. "랭킹", "자동 채점", "모델 업로드"는 보너스 기능으로 천천히 확장 가능.
3. 관리자용 페이지도 따로 만들면 실무 느낌 살릴 수 있음.

==> 4개월로 단축하면 기능도 단축해야함

1. 대회 시스템 : 대회 페이지 UI + 결과 수동 채점업로드
2. 데이터 업로드 : CSV 업로드 + 간단한 검증
3. 랭킹 알고리즘 : 엑셀 점수 수동 입력으로 랭킹 표시
4. 분석 코드 실행 : 코드 업로드는 생략 or 제출한 결과 파일만 받기
5. 커뮤니티 

💡 아래만 잘해도 프로젝트 "와~ 이거 실무에 쓸 수 있겠다" 느낌 줌!

 회원가입 / 로그인 (JWT or Session)
 관리자 페이지에서 대회 등록
 사용자 CSV 업로드
 업로드한 데이터 미리보기
 점수 수동 등록 + 리더보드
 시각화 (Chart.js, Plotly, Python)

단순히 디자인이나 기능을 따라하는 것보단,
→ "우리 서비스에 맞는 목적과 타깃에 맞게 변형/최적화" 하는 게 중요

⏱️ 4개월 안에 가능한 "핵심 기능 MVP 버전"
아래는 실제로 초보자 팀이 4개월 안에 만들 수 있는 구성 예시

	기능		   간소화된 구현 방식 (가능한 수준)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
👤 회원가입/로그인		간단한 인증 시스템 (이메일+비밀번호)
📂 데이터셋 업로드	CSV 파일 업로드 및 다운로드 기능
📄 문제 설명 페이지	관리자만 작성 가능, 대회 상세 설명 게시판처럼 구성
📤 제출 시스템		유저가 .csv 파일 제출, 서버에서 정답과 비교 후 점수 계산
🏆 리더보드		점수 순으로 유저 정렬해서 보여주기
📊 노트북 공유 (선택)	초급 기준에서는 이건 생략해도 OK
💬 댓글/토론 (선택)	기본적인 댓글 시스템만 구현
👩‍🏫 관리자 페이지 (선택)	대회 생성, 정답 업로드 등 간단한 관리자 기능

**********Notion으로 프로젝트 진행 기록 남기기 (기획서, 작업 분배, 일정)******